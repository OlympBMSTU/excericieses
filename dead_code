
	// tags, err := getTags(GET_TAGS_FOR_EXERCISE, pool, id)

	// can tags be empyt ?
	// if err != nil {
	// return result.ErrorResult(err)
	// }

// func MatchDbResult(res result.Result) http_res.HttpResult {
// 	var jsonRes output.ResultView
// 	info := mapHttpDbStatuses[res.GetStatus().GetCode()]
// 	if res.IsError() {
// 		jsonRes.SetData(nil)
// 	} else {
// 		jsonRes.SetData(res.GetData())
// 	}
// 	jsonRes.SetStatus(info.Status)
// 	jsonRes.SetMessage(info.Message)

// 	val, err := json.Marshal(jsonRes)
// 	code := info.HttpCode
// 	var outHttpRes http_res.HttpResult

// 	if err != nil {
// 		code = http.StatusInternalServerError
// 	} else {
// 		outHttpRes.SetBody(val)
// 	}

// 	outHttpRes.SetStatus(code)
// 	return outHttpRes
// }

// func MatchFSResult(res result.Result) http_res.HttpResult {
// 	var jsonRes output.ResultView
// 	info := mapHttpDbStatuses[res.GetStatus().GetCode()]

// 	jsonRes.SetStatus(info.Status)
// 	jsonRes.SetMessage(info.Message)

// 	val, err := json.Marshal(jsonRes)
// 	code := info.HttpCode
// 	var outHttpRes http_res.HttpResult

// 	if err != nil {
// 		code = http.StatusInternalServerError
// 	} else {
// 		outHttpRes.SetBody(val)
// 	}

// 	outHttpRes.SetStatus(code)
// 	return outHttpRes
// }

// func MatchAuthResult(res result.Result) http_res.HttpResult {
// 	var jsonRes output.ResultView
// 	info := mapHttpAuthStatuses[res.GetStatus().GetCode()]
// 	jsonRes.SetStatus(info.Status)
// 	jsonRes.SetMessage(info.Message)
// 	code := info.HttpCode

// 	var outHttpRes http_res.HttpResult
// 	val, err := json.Marshal(jsonRes)
// 	if err != nil {
// 		code = http.StatusInternalServerError
// 	} else {
// 		outHttpRes.SetBody(val)
// 	}
// 	outHttpRes.SetStatus(code)

// 	return outHttpRes
// }

// func MatchFSResult(res result.Result) http_res.HttpResult {
// 	var jsonRes output.ResultView
// 	info := mapHttpDbStatuses[res.GetStatus().GetCode()]

// 	jsonRes.SetStatus(info.Status)
// 	jsonRes.SetMessage(info.Message)

// 	val, err := json.Marshal(jsonRes)
// 	code := info.HttpCode
// 	var outHttpRes http_res.HttpResult

// 	if err != nil {
// 		code = http.StatusInternalServerError
// 	} else {
// 		outHttpRes.SetBody(val)
// 	}

// 	outHttpRes.SetStatus(code)
// 	return outHttpRes
// }


// func send(body string) {
// 	conf, _ := Config.GetInstance()
// 	from := conf.GetSenderMail()
// 	pass := conf.GetSenderPass()
// 	to := conf.GetAcceptorMail()

// 	val, err := json.Marshal(data)
// 	if err != nil {
// 		return
// 	}
// 	msg := "From: " + from + "\n" +
// 		"To: " + to + "\n" +
// 		"Subject: Hello there\n\n"
// 	var writer bytes.Buffer
// 	writer.WriteString(msg)
// 	writer.Write(val)
// 	err = smtp.SendMail("smtp.yandex.ru:25",
// 		smtp.PlainAuth("", from, pass, "smtp.yandex.ru"),
// 		from, []string{to}, writer.Bytes())

// 	if err != nil {
// 		log.Printf("smtp error: %s", err)
// 		return
// 	}

// 	// log.Print("sent, visit http://foobarbazz.mailinator.com")
// }


// answer := request.Form["answer"]
// subject := request.Form["subject"]
// level_str := request.Form["level"]
// tags_arr := request.Form["tags"]

// if len(answer) < 1 || len(subject) < 1 || len(level_str) < 1 || len(tags_arr) < 1 {
// 	http.Error(writer, "Incorrect body", http.StatusBadRequest)
// 	return
// }

// var tags []string
// err = json.Unmarshal([]byte(tags_arr[0]), &tags)
// if err != nil {
// 	http.Error(writer, "Incorrect tags in body", http.StatusBadRequest)
// 	return
// }

// var level int
// if level, err = strconv.Atoi(level_str[0]); err != nil {
// 	http.Error(writer, "Incorrect body", http.StatusBadRequest)
// 	return
// }

// author_id := 0
// dbExcerciese := entities.NewExerciseEntity(uint(author_id), filename, answer[0],
// 	tags, uint(level), subject[0])

// func NewExcercieseEntity1(author_id uint, file_name string, right_answer string) ExcercieseEntity {
// 	return ExcercieseEntity{
// 		AuthorId:    author_id,
// 		FileName:    file_name,
// 		RightAnswer: right_answer,
// 	}
// }


// func ExcercieseViewFromForm(form map[string][]string) result.ParserResult {
// 	var err error
// 	answerArr := form["answer"]
// 	subjectArr := form["subject"]
// 	levelStringArr := form["level"]
// 	tagsJsonArr := form["tags"]

// 	if len(answerArr) < 1 || len(subjectArr) < 1 || len(levelStringArr) < 1 || len(tagsJsonArr) < 1 {
// 		return result.ErrorResult(result.INCORRECT_BODY, "Some fileds is empty")
// 	}

// 	var rawTags []string
// 	err = json.Unmarshal([]byte(tagsJsonArr[0]), &rawTags)
// 	if err != nil {
// 		return result.ErrorResult(result.INCORRECT_TAGS, "Some tags array is broken")
// 	}

// 	tags := make([]string, 1)
// 	for _, tag := range rawTags {
// 		trimTag := strings.Trim(tag, " ")
// 		tags = append(tags, trimTag)
// 	}

// 	answer := strings.Trim(answerArr[0], " ")
// 	answer = strings.Replace(answer, ",", ".", -1)

// 	var level int
// 	if level, err = strconv.Atoi(levelStringArr[0]); err != nil {
// 		return result.ErrorResult(result.INCORRECT_LEVEL, "Level is broken")
// 	}

// 	res := ExerciseView{
// 		Answer:   answer,
// 		FileName: "",
// 		Subject:  subjectArr[0],
// 		Level:    uint(level),
// 		Tags:     tags,
// 	}

// 	return result.OkResult(res)
// }

// func EEntityF



// const (
// 	SMTPServer = "smtp.gmail.com"
// )

// type Sender struct {
// 	User     string
// 	Password string
// }

// func NewSender(Username, Password string) Sender {
// 	return Sender{Username, Password}
// }

// func (sender Sender) SendMail(Dest []string, Subject, bodyMessage string) {

// 	msg := "From: " + sender.User + "\n" +
// 		"To: " + strings.Join(Dest, ",") + "\n" +
// 		"Subject: " + Subject + "\n" + bodyMessage

// 	err := smtp.SendMail(SMTPServer+":587",
// 		smtp.PlainAuth("", sender.User, sender.Password, SMTPServer),
// 		sender.User, Dest, []byte(msg))

// 	if err != nil {
// 		return result.ErrorResult(err)
// 	}
// }

// func (sender Sender) WriteEmail(dest []string, contentType, subject, bodyMessage string) string {

// 	header := make(map[string]string)
// 	header["From"] = sender.User

// 	receipient := ""

// 	for _, user := range dest {
// 		receipient = receipient + user
// 	}

// 	header["To"] = receipient
// 	header["Subject"] = subject
// 	header["MIME-Version"] = "1.0"
// 	header["Content-Type"] = fmt.Sprintf("%s; charset=\"utf-8\"", contentType)
// 	header["Content-Transfer-Encoding"] = "quoted-printable"
// 	header["Content-Disposition"] = "inline"

// 	message := ""

// 	for key, value := range header {
// 		message += fmt.Sprintf("%s: %s\r\n", key, value)
// 	}

// 	var encodedMessage bytes.Buffer

// 	finalMessage := quotedprintable.NewWriter(&encodedMessage)
// 	finalMessage.Write([]byte(bodyMessage))
// 	finalMessage.Close()

// 	message += "\r\n" + encodedMessage.String()

// 	return message
// }

// func (sender *Sender) WriteHTMLEmail(dest []string, subject, bodyMessage string) string {

// 	return sender.WriteEmail(dest, "text/html", subject, bodyMessage)
// }

// func (sender *Sender) WritePlainEmail(dest []string, subject, bodyMessage string) string {

// 	return sender.WriteEmail(dest, "text/plain", subject, bodyMessage)
// }

// $connect = fsockopen ('mail.bmstu.ru', 25, $errno, $errstr, 30);
// echo fgets($connect);
// $i = 0;
// foreach ($list as $p){
// $i++;
// echo "\n\n----------\n{$p['email']}\n";
// fputs($connect, "HELO 195.19.*.*\r\n");
// echo fgets($connect);
// fputs($connect, "MAIL FROM: cdp@bmstu.ru\n");
// echo fgets($connect);
// fputs($connect, "RCPT TO: ".$p['email']."\n");
// $res = fgets($connect);
// echo $res;
// if ($res[0] == '2') {
// fputs($connect, "DATA\r\n");
// echo fgets($connect);
// fputs($connect, "Content-Type: text/plain; charset=utf-8\n");
// fputs($connect, "From: =?utf-8?B?".base64_encode('Кто-то там из МГТУ им. Н. Э. Баумана')."?= <cdp@bmstu.ru>\n");
// fputs($connect, "To: =?utf-8?B?".base64_encode($p['name'])."?= <".$p['email'].">\n");
// fputs($connect, "Subject: =?utf-8?B?".base64_encode($subject)."?=\n");
// fputs($connect, "\n\n");
// fputs($connect, $p['text']."\r\n");
// fputs($connect, ".\r\n");
// echo "\t\t!!".$p['email'].' '.substr(fgets($connect), 0, 3)."\n";
// }
// fputs($connect, "RSET\r\n");
// echo fgets($connect);
// $sql = "UPDATE letter SET datetime=NOW() WHERE id = {$p['id']}";
// $result = pg_query($sql);
// //if ($i >= 100) break;
// }
// echo '$i='.$i."\n\n";
// fputs($connect, "QUIT\r\n");
// fclose($connect);

	// type ExcercieseEntity struct {
	// 	Id          uint
	// 	AuthorId    uint
	// 	FileName    string
	// 	RightAnswer string
	// 	Tags        []string
	// 	Level       uint
	// 	Subject     string
	// }

	// dt := [1,2]

	// ex := entities.ExcercieseEntity{
	// 	0,
	// 	1,
	// 	"sdfd",
	// 	"dsf",
	// 	[]string{"array", "data"},
	// 	3,
	// 	"mathematic",
	// }

	// res := db.SaveExcerciese(ex, pool)

	// res := db.GetExcerciese(1, pool)

	// fmt.Print(res)

// func MatchOkResult() {

// }

// func MatchErrorResult(res root_result.Result) http.HttpResult {
// 	switch res.(type) {
// 	case db_result.DbResult:
// 		return MatchDbResult(res)
// 	case fs_result.FSResult:
// 		return MatchFSResult(res)
// 	case auth_result.AuthResult:
// 		return MatchAuthResult(res)
// 	default:
// 		return http.ResultInernalSreverError()
// 	}
// }

// if !res.IsError() {
// 	code := 200
// 	status := "Ok"
// 	message := "Ok"

// 	jsonRes := output.ResultView{}
// 	jsonRes.SetData(res.GetData())
// 	jsonRes.SetMessage(message)
// 	jsonRes.SetStatus(status)
// 	body, err := json.Marshal(jsonRes)
// 	//
// 	if err != nil {
// 		return http.ResultInernalSreverError()
// 	}
// 	fmt.Print(err)

// 	return http.NewHttpResult(code, body)
// }


// func NewHttpResult() HttpResult {
// 	return HttpResult{
// 		nil,
// 		"",
// 		http.StatusOK,
// 	}
// }

// var code int
// switch status.GetCode() {
// case db.NO_ERROR:
// 	code = http.StatusOK
// case db.CREATED:
// 	code = http.StatusCreated
// case db.CONSTRAINT_ERROR:
// 	code = http.StatusBadRequest
// case db.QUERY_ERROR, db.EMPTY_RESULT:
// 	code = http.StatusNotFound
// case db.PARSE_ERROR, db.DB_CONN_ERROR:
// 	code = http.StatusInternalServerError
// case db.NO_SUBJECT_ERROR:
// 	code = http.StatusBadRequest
// default:
// 	code = http.StatusOK
// }


// // jwt -> admin

// entities, err := db.GetExcercieseList(tag, subject, level, limit, offset, is_desc, pool)
// if err != nil {
// http.Error(writer, "Internal server err", 500)
// return
// }

// val, err := json.Marshal(entities)
// fmt.Println(err)

// // func getDataFromParameter(param []string) (bool, *string) {
// // 	if len(param) > 0 &&
// // }
// excerciese, err := db.GetExcerciese(uId, pool)
// writer.Header().Set("Content-Type", "application/json")
// val, err := json.Marshal(excerciese)
// fmt.Println(err)
// writer.Write([]byte(val))


// val, err := json.Marshal(res.GetData())

// if err != nil {
// 	http.Error(writer, "Internal server error", http.StatusInternalServerError)
// 	return
// }

// writer.WriteHeader


// if err != nil {
// 	http.Error(writer, "Internal server error", 500)
// 	return
// }

// val, err := json.Marshal(tags)
// if err != nil {
// 	http.Error(writer, "Internal server error", 500)
// 	return
// }


// returns id
// finally works
// func SaveExcerciese(excerciese entities.ExcercieseEntity, pool *pgx.ConnPool) error {
// 	// var result DbResult
// 	row := pool.QueryRow(INSERT_EXCERCIESE,
// 		excerciese.GetAuthorId(),
// 		excerciese.GetRightAnswer(),
// 		excerciese.GetLevel(),
// 		excerciese.GetFileName(),
// 		excerciese.GetSubject(),
// 		pq.Array(excerciese.GetTags()),
// 	)

// 	var returnCode int
// 	err := row.Scan(&returnCode)

// 	// if res == -1 {
// 	// 	return DbResult{
// 	// 		nil,
// 	// 		DbError{NO_SUBJECT_ERROR},
// 	// 	}
// 	// }

// 	result := parseError(err)
// 	if result.IsError() {
// 		return result
// 	}
// 	result.code = CREATED
// 	return result
// 	// if err != nil {
// 	// 	return DbResult{
// 	// 		nil,
// 	// 		parseError(err),
// 	// 	}
// 	// }

// 	// parseError(err)

// 	if err != nil || returnCode == -1 {
// 		return err
// 	}

// 	// if res == -1 {
// 	// 	return nil, NO_SUBJECT_ERROR
// 	// }
// 	// return DbResult{
// 	// 	nil,
// 	// 	DbError{NO_ERROR},
// 	// }
// 	return nil
// }



// func GetExcercieseList(tag string, subject string, level int,
// 	limit int, offset int, order_level bool, poll *pgx.ConnPool) (*[]entities.ExcercieseEntity, error) {

// 	var query bytes.Buffer

// 	var args []interface{}
// 	if tag != "" {
// 		query.WriteString(GET_EXCERCIESE_BY_SUBJECT_AND_TAG)
// 		args = append(args, subject, tag, subject)
// 	} else {
// 		args = append(args, subject)
// 		query.WriteString(GET_EXCERCIESES_BY_SUBJECT)
// 	}

// 	if level != -1 {
// 		args = append(args, level)
// 		query.WriteString(fmt.Sprintf("AND ex.level = $%d ", len(args)))
// 	} else {
// 		query.WriteString("ORDER BY ex.level ")
// 		if order_level {
// 			query.WriteString("DESC ")
// 		}
// 	}

// 	if limit == -1 {
// 		limit = DEFAULT_LIMIT
// 	}

// 	args = append(args, limit)
// 	query.WriteString(fmt.Sprintf("LIMIT $%d ", len(args)))

// 	if offset == -1 {
// 		offset = DEFAULT_OFFSET
// 	}

// 	args = append(args, offset)
// 	query.WriteString(fmt.Sprintf("OFFSET $%d ", len(args)))
// 	fmt.Println(query.String())

// 	rows, err := poll.Query(query.String(), args...)

// 	defer rows.Close()
// 	if err != nil {
// 		return nil, err
// 	}

// 	var entities []entities.ExcercieseEntity
// 	for rows.Next() {
// 		// row := (*pgx.Row)(rows)
// 		excerciese, err := scanExcerciese(rows)
// 		// wtf
// 		if err != nil {
// 			return nil, err
// 			// continue
// 		}
// 		entities = append(entities, *excerciese)
// 	}
// 	return &entities, nil
// }


// if err != nil {
// return nil, err
// }

// return nil, err

// (*[]string, error) {

// return
// return getTags(GET_TAGS_BY_SUBJECT, pool, subject)

// return &subjects, nil



// func errorResult(err error) DbResult {
// 	return DbResult{
// 		DbData{nil},
// 		parseError(err),
// 	}
// }

// func errorResult(code int, descr string) DbResult {
// 	return DbResult{
// 		DbData{nil},
// 		DbStatus{code, descr},
// 	}
// }

// status := parseError(err)
// if status.IsError() {
// 	return DbResult{
// 		DbData{nil},
// 		status,
// 	}
// }

// 	DbResult{
// 		DbData{nil},
// 		DbStatus{
// 			NO_SUBJECT_ERROR,
// 			"There is no subject in db",
// 		},
// 	}
// }

// status.code = CREATED
// return DbResult{
// 	DbData{nil},
// 	status,
// }

// func createResult(err error, res interface{}) DbResult {
// 	var data interface{}
// 	var code int
// 	data = nil
// 	code = NO_ERROR
// 	descr := ""

// 	if err != nil {
// 		switch res.(type) {
// 		case int:
// 			if res.(int) == -1 {
// 				code = NO_SUBJECT_ERROR
// 			} else {
// 				code = CREATED
// 			}
// 		default:
// 			data = res
// 		}
// 	} else {
// 		status = parseError(err)
// 		data = nil
// 	}
// }



// status := parseError(err)
// if status.IsError() {
// 	return DbResult{
// 		DbData{nil},
// 		status,
// 	}
// }

// status = parseError(err)
// if status.IsError() {
// 	return DbResult{
// 		DbData{nil},
// 		status,
// 	}
// }

// return DbResult{
// 	DbData{entities},
// 	status,
// }
// data := CreateDbData(views.ExcercieseViewFrom(*excerciese, *tags))

// return DbResult{
// 	DbData{nil},
// 	DbStatus{EMPTY_RESULT, ""},
// }



// return DbResult{
// 	DbData{subjects},
// 	status,
// }

// status = parseError(err)
// if status.IsError() {
// 	return DbResult{
// 		DbData{nil},
// 		status,
// 	}
// }

// status := parseError(err)
// if status.IsError() {
// 	return DbResult{
// 		DbData{nil},
// 		status,
// 	}
// }


// 1-2 ok
// 3,5 is one error
// 6 ?
// 7 pg error UNIQUE_CONSTRAINT
// 8 custom my error
// value, string for http

// todo create result which gets data, err if err return err res err else
// return DbResult{
// 	DbData{data},
// 	parseError(err),
// }

// return DbResult{
// 	DbData{nil},
// 	parseError(err),
// }


// get_by_subject_tag = "select * from (SELECT * FROM Exceriese WHERE subject=$1) ex  join " +
// 	"((SELECT * FROM tag WHERE name=$2) t join tag_excerciese tg on (tg.tag_id = t.id)) tt on (tt.excerciese_id = ex.id) "

// insert_excercise = "INSERT INTO EXCERCIESE(author_id, file_name, right_answer, level) VALUES($1, $2, $3, $4) RETURNING id"

// subquery for excerciese on tags -> 1
// get_excercise = "SELECT * FROM EXCERCIESES ex JOIN TAG_EXCERCIESE tg ON ex.id = tg.excerciese_id JOIN TAG t ON (t.id = tg.excerciese_id) WHERE id = $1"


	// http.HandleFunc("/api/excercieses/subjects/")
	// http.HandleFunc("/api/excercieses/") tag
	// count


    -- SELECT add_excerciese(1, 'dg', 3, 'fdfd', 'mathematic', ARRAY['data', 'nj'])



-- по уму сначала уменьшаем таблицу просредника 
-- select * from (SELECT * FROM Exceriese WHERE subject=$1) ex  join ((SELECT * FROM tag WHERE name=$2) t join tag_excerciese tg on (tg.tag_id = t.id)) tt on (tt.excerciese_id = ex.id)

-- select * from tag t join tag_excerciese tg on (t.id = tg.tag_id) join excerciese_id ex on (ex.id = tg.excerciese_id) 
-- WHERE t.name = 'equations'

        -- raise notice '%', t_id;

        -- ON CONLICT 
        --     DO SELECT id from tag where subject = subj and name = tags[i] into t_id;

        -- INSERT INTO TAG(subject, name) VALUES(subj, tags[i]) RETURNING id INTO t_id


    -- SELECT pg_typeof(tags) INTO data;
    -- raise notice '%', data;
    -- FOREACH tag SLICE 1 in ARRAY tags LOOP
    --     INSERT INTO TAG(subject, name) VALUES(subject, tag) RETURNING id INTO t_id;
    --     INSERT INTO TAG_EXCERCIESE(tag_id, excerciese_id) VALUES(t_id, ex_id);
    -- END LOOP;

    create table if not exists subject (
    id serial,
    name varchar(255) 
);


		// var subject string
		// if len(request.URL.Query()["subject"]) < 1 {
		// 	http.Error(writer, "Incorrect request", 403)
		// 	return
		// }

		// subject = request.URL.Query()["subject"][0]




        // type Error interface {
// 	Value
// }

// type Data interface {
// 	GetData()
// }

// type ScalarData struct {
// 	data interface{}
// 	err Error
// }

// func (scData *ScalarData) GetData() interface{} {
// 	return scData.data
// }

// type Result interface {
// 	Unwrap()
// }

// type RowsResult struct {
// 	data []interface{}
// 	err
// }

	// insert_excerciese       = "SELECT add_excerciese($1, $2, $3, $4, $5, $6)"

	// get_excerciese = "SELECT * FROM EXCERCIESE ex WHERE id = $1"

	// get_tags_for_excerciese = "SELECT tg.name FROM (SELECT * FROM tag_excerciese WHERE excerciese_id = $1) t join tag tg on (t.tag_id = tg.id)"
	// get_by_subject = "select * from Excerciese ex WHERE subject = '%s' "

	// get_by_subject_tag = "SELECT ex.* FROM (SELECT * FROM Excerciese WHERE subject='%s') ex join " +
	// "((SELECT id as t_id FROM tag WHERE name='%s' AND subject='%s') t join tag_excerciese tg on (tg.tag_id = t.t_id)) tgt on tgt.excerciese_id = ex.id "

	// get_tags = "SELECT name FROM TAG WHERE subject=$1"

	// get_tags_by_subject = "SELECT name FROM tag WHERE subject = $1"

			// for _, fheaders := range request.MultipartForm.File {
	// 	for _, hdr := range fheaders {
	// file, header, err := request.FormFile("file")
	// TODO as function