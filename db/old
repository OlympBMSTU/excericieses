// returns id
// finally works
// func SaveExcerciese(excerciese entities.ExcercieseEntity, pool *pgx.ConnPool) error {
// 	// var result DbResult
// 	row := pool.QueryRow(INSERT_EXCERCIESE,
// 		excerciese.GetAuthorId(),
// 		excerciese.GetRightAnswer(),
// 		excerciese.GetLevel(),
// 		excerciese.GetFileName(),
// 		excerciese.GetSubject(),
// 		pq.Array(excerciese.GetTags()),
// 	)

// 	var returnCode int
// 	err := row.Scan(&returnCode)

// 	// if res == -1 {
// 	// 	return DbResult{
// 	// 		nil,
// 	// 		DbError{NO_SUBJECT_ERROR},
// 	// 	}
// 	// }

// 	result := parseError(err)
// 	if result.IsError() {
// 		return result
// 	}
// 	result.code = CREATED
// 	return result
// 	// if err != nil {
// 	// 	return DbResult{
// 	// 		nil,
// 	// 		parseError(err),
// 	// 	}
// 	// }

// 	// parseError(err)

// 	if err != nil || returnCode == -1 {
// 		return err
// 	}

// 	// if res == -1 {
// 	// 	return nil, NO_SUBJECT_ERROR
// 	// }
// 	// return DbResult{
// 	// 	nil,
// 	// 	DbError{NO_ERROR},
// 	// }
// 	return nil
// }



// func GetExcercieseList(tag string, subject string, level int,
// 	limit int, offset int, order_level bool, poll *pgx.ConnPool) (*[]entities.ExcercieseEntity, error) {

// 	var query bytes.Buffer

// 	var args []interface{}
// 	if tag != "" {
// 		query.WriteString(GET_EXCERCIESE_BY_SUBJECT_AND_TAG)
// 		args = append(args, subject, tag, subject)
// 	} else {
// 		args = append(args, subject)
// 		query.WriteString(GET_EXCERCIESES_BY_SUBJECT)
// 	}

// 	if level != -1 {
// 		args = append(args, level)
// 		query.WriteString(fmt.Sprintf("AND ex.level = $%d ", len(args)))
// 	} else {
// 		query.WriteString("ORDER BY ex.level ")
// 		if order_level {
// 			query.WriteString("DESC ")
// 		}
// 	}

// 	if limit == -1 {
// 		limit = DEFAULT_LIMIT
// 	}

// 	args = append(args, limit)
// 	query.WriteString(fmt.Sprintf("LIMIT $%d ", len(args)))

// 	if offset == -1 {
// 		offset = DEFAULT_OFFSET
// 	}

// 	args = append(args, offset)
// 	query.WriteString(fmt.Sprintf("OFFSET $%d ", len(args)))
// 	fmt.Println(query.String())

// 	rows, err := poll.Query(query.String(), args...)

// 	defer rows.Close()
// 	if err != nil {
// 		return nil, err
// 	}

// 	var entities []entities.ExcercieseEntity
// 	for rows.Next() {
// 		// row := (*pgx.Row)(rows)
// 		excerciese, err := scanExcerciese(rows)
// 		// wtf
// 		if err != nil {
// 			return nil, err
// 			// continue
// 		}
// 		entities = append(entities, *excerciese)
// 	}
// 	return &entities, nil
// }


// if err != nil {
// return nil, err
// }

// return nil, err

// (*[]string, error) {

// return
// return getTags(GET_TAGS_BY_SUBJECT, pool, subject)

// return &subjects, nil



// func errorResult(err error) DbResult {
// 	return DbResult{
// 		DbData{nil},
// 		parseError(err),
// 	}
// }

// func errorResult(code int, descr string) DbResult {
// 	return DbResult{
// 		DbData{nil},
// 		DbStatus{code, descr},
// 	}
// }

// status := parseError(err)
// if status.IsError() {
// 	return DbResult{
// 		DbData{nil},
// 		status,
// 	}
// }

// 	DbResult{
// 		DbData{nil},
// 		DbStatus{
// 			NO_SUBJECT_ERROR,
// 			"There is no subject in db",
// 		},
// 	}
// }

// status.code = CREATED
// return DbResult{
// 	DbData{nil},
// 	status,
// }

// func createResult(err error, res interface{}) DbResult {
// 	var data interface{}
// 	var code int
// 	data = nil
// 	code = NO_ERROR
// 	descr := ""

// 	if err != nil {
// 		switch res.(type) {
// 		case int:
// 			if res.(int) == -1 {
// 				code = NO_SUBJECT_ERROR
// 			} else {
// 				code = CREATED
// 			}
// 		default:
// 			data = res
// 		}
// 	} else {
// 		status = parseError(err)
// 		data = nil
// 	}
// }
